{"version":3,"sources":["components/IcHtml/ImgCapture.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ImgCapture","videoPnl","ctx","photo","useState","previewPicture","setPreviewPicture","src","width","height","autoPlay","alt","type","onClick","document","querySelector","md","navigator","mediaDevices","getUserMedia","video","then","stream","srcObject","err","console","log","canvas","createElement","clientHeight","clientWidth","getContext","drawImage","getCanvas","toDataURL","App","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"8PA6EeA,EA3EI,WAEf,IAGIC,EAEAC,EALAC,EAAgB,GAFC,EAQuBC,mBAASD,GARhC,mBAQdE,EARc,KAQEC,EARF,KA+DrB,OACI,6BACI,2BAAOC,IAAI,MAAMC,MAAM,QAAQC,OAAO,SAASC,UAAQ,IACvD,yBAAKH,IAAKF,EAAgBM,IAAI,GAAGH,MAAM,QAAQC,OAAO,WACtD,6BACA,4BAAQG,KAAK,SAASC,QA3Bb,WACbZ,EAAWa,SAASC,cAAc,SAClC,IAAIC,EAAmBC,UAAUC,aACpBF,EAAGG,aAAa,CAAEC,OAAO,IACtCJ,EAAGG,aAAa,CAAEC,OAAO,IACpBC,MAAK,SAACC,GACCrB,IACAA,EAASsB,UAAYD,IACT,KACjB,SAACE,GACAC,QAAQC,IAAIF,QAiBhB,UACA,4BAAQZ,KAAK,SAASC,QAdZ,WACd,IAAIc,EA9BU,WAEd,GAAI1B,EAAU,CACV,IAAI0B,EAA4Bb,SAASc,cAAc,UAQvD,OAPAD,EAAOlB,OAASR,EAAS4B,aACzBF,EAAOnB,MAAQP,EAAS6B,aAExB5B,EAAMyB,EAAOI,WAAW,QAEpB7B,EAAI8B,UAAU/B,EAAU,EAAG,EAAG0B,EAAOnB,MAAOmB,EAAOlB,QAEhDkB,GAmBiCM,GACxCN,IACAxB,EAAQwB,EAAOO,UAvDQ,eAyD3B5B,EAAkBH,KASd,cACA,+BCtDGgC,EAXH,WACV,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAEhB,kBAAC,EAAD,SCAFC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtC5B,UAAU6B,cACPC,SAASH,GACTvB,MAAK,SAAA2B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfpC,UAAU6B,cAAcQ,YAI1B7B,QAAQC,IACN,iHAKEmB,GAAUA,EAAOU,UACnBV,EAAOU,SAASP,KAMlBvB,QAAQC,IAAI,sCAGRmB,GAAUA,EAAOW,WACnBX,EAAOW,UAAUR,WAO5BS,OAAM,SAAAC,GACLjC,QAAQiC,MAAM,4CAA6CA,MClGjEC,IAASC,OAAO,kBAAC,EAAD,MAAS9C,SAAS+C,eAAe,SDqB1C,SAAkBhB,GACvB,GAA6C,kBAAmB5B,UAAW,CAMzE,GAJkB,IAAI6C,IACpBC,YACAxB,OAAOC,SAASwB,MAEJC,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMmB,YAAN,sBAEP1B,IAgEV,SAAiCO,EAAeC,GAE9CsB,MAAMvB,EAAO,CACXwB,QAAS,CAAE,iBAAkB,YAE5B/C,MAAK,SAAAgD,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CxD,UAAU6B,cAAc4B,MAAMrD,MAAK,SAAA2B,GACjCA,EAAa2B,aAAatD,MAAK,WAC7BkB,OAAOC,SAASoC,eAKpBjC,EAAgBC,EAAOC,MAG1BY,OAAM,WACLhC,QAAQC,IACN,oEAvFAmD,CAAwBjC,EAAOC,GAI/B5B,UAAU6B,cAAc4B,MAAMrD,MAAK,WACjCI,QAAQC,IACN,iHAMJiB,EAAgBC,EAAOC,OC/C/BC,K","file":"static/js/main.f1e0ed92.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst ImgCapture = () => {\r\n\r\n    let photo: string = \"\";\r\n    let screenshotFormat: string = \"image/jpeg\";\r\n\r\n    let videoPnl: HTMLVideoElement | null;\r\n    let _hasUserMedia: boolean = false;\r\n    let ctx: CanvasRenderingContext2D | null;\r\n    const [previewPicture, setPreviewPicture] = useState(photo);\r\n\r\n    // useEffect(() => {\r\n\r\n    //     videoPnl = document.querySelector('video');\r\n    //     var md: MediaDevices = navigator.mediaDevices;\r\n    //     var stream = md.getUserMedia({ video: true });\r\n    //     md.getUserMedia({ video: true })\r\n    //         .then((stream) => {\r\n    //             if (videoPnl)\r\n    //                 videoPnl.srcObject = stream;\r\n    //             _hasUserMedia = true;\r\n    //         }, (err) => {\r\n    //             console.log(err);\r\n    //         });\r\n    // }\r\n    // , []);\r\n\r\n    const getCanvas = () => {\r\n\r\n        if (videoPnl) {\r\n            var canvas: HTMLCanvasElement = document.createElement(\"canvas\");\r\n            canvas.height = videoPnl.clientHeight;\r\n            canvas.width = videoPnl.clientWidth;\r\n\r\n            ctx = canvas.getContext(\"2d\");\r\n            if (ctx) {\r\n                ctx.drawImage(videoPnl, 0, 0, canvas.width, canvas.height);\r\n            }\r\n            return canvas;\r\n        }\r\n    }\r\n\r\n    const cameraOn = () => {\r\n        videoPnl = document.querySelector('video');\r\n        var md: MediaDevices = navigator.mediaDevices;\r\n        var stream = md.getUserMedia({ video: true });\r\n        md.getUserMedia({ video: true })\r\n            .then((stream) => {\r\n                if (videoPnl)\r\n                    videoPnl.srcObject = stream;\r\n                _hasUserMedia = true;\r\n            }, (err) => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    const takePhoto = () => {\r\n        var canvas: HTMLCanvasElement | undefined = getCanvas();\r\n        if (canvas) {\r\n            photo = canvas.toDataURL(screenshotFormat);\r\n        }\r\n        setPreviewPicture(photo)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <video src=\"src\" width=\"width\" height=\"height\" autoPlay></video>\r\n            <img src={previewPicture} alt=\"\" width=\"width\" height=\"height\" />\r\n            <hr />\r\n            <button type=\"button\" onClick={cameraOn}>Camera</button>\r\n            <button type=\"button\" onClick={takePhoto}>Take Photo</button>\r\n            <hr />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImgCapture;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Icapture from './components/Icapture/Icapture';\nimport IcHtml from './components/IcHtml/IcHtml';\nimport ImgCapture from './components/IcHtml/ImgCapture';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <Icapture></Icapture> */}\n        <ImgCapture />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}