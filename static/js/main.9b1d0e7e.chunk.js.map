{"version":3,"sources":["components/IcHtml/ImgCapture.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ImgCapture","videoPnl","useState","previewPicture","constraints","video","id","width","height","autoPlay","src","alt","type","onClick","document","querySelector","navigator","mediaDevices","getUserMedia","then","stream","srcObject","canvas","context","getContext","drawImage","App","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","addEventListener","event","preCache","a","caches","open","cache","addAll","waitUntil","ReactDOM","render","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9b1d0e7e.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst ImgCapture = () => {\r\n\r\n    let photo: string = \"\";\r\n    let screenshotFormat: string = \"image/jpeg\";\r\n\r\n    let videoPnl: HTMLVideoElement | null;\r\n    let ctx: CanvasRenderingContext2D | null;\r\n    const [previewPicture, setPreviewPicture] = useState(photo);\r\n\r\n    const constraints = {\r\n        video: true,\r\n    };\r\n\r\n    const cameraOn = () => {\r\n        videoPnl = document.querySelector('video');\r\n        navigator.mediaDevices.getUserMedia(constraints)\r\n            .then((stream) => {\r\n                if (videoPnl) {\r\n                    videoPnl.srcObject = stream;\r\n                }\r\n            });\r\n    }\r\n\r\n    const takePhoto = () => {\r\n        videoPnl = document.querySelector('video');\r\n        let canvas = document.querySelector('canvas');\r\n        if (canvas) {\r\n            const context = canvas.getContext('2d');\r\n            if (context && videoPnl)\r\n                context.drawImage(videoPnl, 0, 0, canvas.width, canvas.height);\r\n        }\r\n    }\r\n\r\n    const saveImage = () => {\r\n        let canvas = document.querySelector('canvas');\r\n        if (canvas) {\r\n            canvas.toBlob(function (blob) {\r\n            }, 'image/wbmp');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <video id=\"player\" width=\"320\" height=\"240\" autoPlay></video>\r\n            <img src={previewPicture} alt=\"\" width=\"width\" height=\"height\" />\r\n            <canvas id=\"canvas\" width=\"320\" height=\"240\"></canvas>\r\n            <hr />\r\n            <button type=\"button\" onClick={cameraOn}>Camera On</button>\r\n            <button type=\"button\" onClick={takePhoto}>Take Photo</button>\r\n            <hr />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImgCapture;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Icapture from './components/Icapture/Icapture';\nimport IcHtml from './components/IcHtml/IcHtml';\nimport ImgCapture from './components/IcHtml/ImgCapture';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <Icapture></Icapture> */}\n        <ImgCapture />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nwindow.addEventListener('install', function (event: any) {\n  const preCache = async () => {\n    const cache = await caches.open('ngk-pwa-v1');\n    return cache.addAll([\n      '/index.html',\n      '/static/css',\n      '/static/styles.css',\n      '/logo192.png',\n      '/favicon.ico',\n      '/logo512.png'\n    ]);\n  };\n  event.waitUntil(preCache());\n  console.log('install called' + event);\n});\n\nwindow.addEventListener('fetch', function(event: any) {\n  console.log('fetch called' + event);\n});\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}